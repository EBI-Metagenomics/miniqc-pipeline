manifest {
    nextflowVersion = '!>=23.04.0'
    mainScript = "main.nf"
}

plugins {
  id "nf-schema@2.0.0"
}

validation {
    failUnrecognisedParams = true
}

params {

    // Input
    samplesheet                = ""
    
    // Feature flags
    merge_pairs                = false

    ref_genome                 = ""

    // MultiQC options
    multiqc_config             = null
    multiqc_title              = null
    multiqc_logo               = null
    multiqc_methods_description = null

    // Boilerplate options
    outdir                     = "results"
    publish_dir_mode           = 'copy'
    help                       = false
    version                    = false

    // Max resource options
    // Defaults only, expecting to be overwritten
    max_memory                 = '128.GB'
    max_cpus                   = 16
    max_time                   = '240.h'

    singularity_cachedir       = null

    // Schema validation default options
    validate_params                  = true
}

includeConfig 'config/base.config'
includeConfig 'config/modules.config'

profiles {

    codon {
        includeConfig 'config/codon.config'
    }

    singularity {
       enabled = true
       autoMounts = true
       cacheDir = params.singularity_cachedir
       registry = 'quay.io'
    }

    docker {
        docker.enabled         = true
        conda.enabled          = false
        singularity.enabled    = false
        podman.enabled         = false
        shifter.enabled        = false
        charliecloud.enabled   = false
        apptainer.enabled      = false
        docker.runOptions      = '-u $(id -u):$(id -g)'
    }

    arm {
        docker.runOptions      = '-u $(id -u):$(id -g) --platform=linux/amd64'
    }

    local {
         docker {
            enabled = true
            autoMounts = true
            registry = 'quay.io'
            userEmulation = true
            runOptions = "--platform linux/x86_64"
        }
        executor {
            name = "local"
            cpus = 2
            memory = '1 GB'
        }
    }

    test {
        executor {
            name = "local"
            cpus = 2
            memory = '1 GB'
        }
        params {
            max_cpus = 2
            max_memory = '1GB'
        }
    }
}

// Set default registry for Apptainer, Docker, Podman and Singularity independent of -profile
apptainer.registry   = 'quay.io'
docker.registry      = 'quay.io'
podman.registry      = 'quay.io'

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
// The JULIA depot path has been adjusted to a fixed path `/usr/local/share/julia` that needs to be used for packages in the container.
// See https://apeltzer.github.io/post/03-julia-lang-nextflow/ for details on that. Once we have a common agreement on where to keep Julia packages, this is adjustable.

env {
    PYTHONNOUSERSITE = 1
    R_PROFILE_USER   = "/.Rprofile"
    R_ENVIRON_USER   = "/.Renviron"
    JULIA_DEPOT_PATH = "/usr/local/share/julia"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

def trace_timestamp = new java.util.Date().format( 'yyyy-MM-dd_HH-mm-ss')
timeline {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_timeline_${trace_timestamp}.html"
}
report {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_report_${trace_timestamp}.html"
}
trace {
    enabled = true
    file    = "${params.outdir}/pipeline_info/execution_trace_${trace_timestamp}.txt"
}
dag {
    enabled = true
    file    = "${params.outdir}/pipeline_info/pipeline_dag_${trace_timestamp}.html"
}

manifest {
    name            = 'microbiome-informatics/miniqc-pipeline'
    author          = "Microbiome Informatics team"
    homePage        = 'https://github.com/ebi-metagenomics/miniqc-pipeline'
    description     = "Microbiome Informatics Mini QC pipeline"
    mainScript      = 'main.nf'
    nextflowVersion = '!>=23.04.0'
    version         = '0.1'
    doi             = ''
}

def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}